{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\bot-battlr\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport BotCollection from \"./components/BotCollection\";\nimport YourBotArmy from \"./components/YourBotArmy\";\nimport \"./App.css\";\n\n// This is the public endpoint you were trying to fix earlier\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOTS_API = \"https://bot-battlr-api.onrender.com/bots\";\nfunction App() {\n  _s();\n  // FIX: Initialize bots as an empty array [] to prevent the \"bots.map is not a function\" error\n  const [bots, setBots] = useState([]);\n  const [army, setArmy] = useState([]);\n\n  // Fetch all bots on initial component mount\n  useEffect(() => {\n    fetch(BOTS_API).then(r => r.json()).then(data => setBots(data)).catch(error => console.error(\"Error fetching bots:\", error));\n  }, []);\n\n  // Handler to add a bot to the army\n  const enlistBot = bot => {\n    // Prevent enlisting a bot if it's already in the army\n    if (!army.find(b => b.id === bot.id)) {\n      setArmy([...army, bot]);\n    }\n  };\n\n  // Handler to remove a bot from the army\n  const dischargeBot = bot => {\n    setArmy(army.filter(b => b.id !== bot.id));\n  };\n\n  // Optional: Handler to permanently delete a bot from the backend and the UI\n  const deleteBot = bot => {\n    // 1. Send DELETE request to the backend\n    fetch(`${BOTS_API}/${bot.id}`, {\n      method: 'DELETE'\n    }).then(r => {\n      if (r.ok) {\n        // 2. Remove from the local army state (if present)\n        setArmy(army.filter(b => b.id !== bot.id));\n\n        // 3. Remove from the local bots collection state\n        setBots(bots.filter(b => b.id !== bot.id));\n      } else {\n        console.error(\"Failed to delete bot on server.\");\n      }\n    }).catch(error => console.error(\"Error deleting bot:\", error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(YourBotArmy, {\n      army: army,\n      onDischarge: dischargeBot,\n      onDelete: deleteBot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BotCollection, {\n      bots: bots,\n      onEnlist: enlistBot,\n      onDelete: deleteBot,\n      army: army // Pass army to allow BotCollection to disable enlisted bots\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"68vvBV/GRPK97Mw+lesffEpDxCY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BotCollection","YourBotArmy","jsxDEV","_jsxDEV","BOTS_API","App","_s","bots","setBots","army","setArmy","fetch","then","r","json","data","catch","error","console","enlistBot","bot","find","b","id","dischargeBot","filter","deleteBot","method","ok","className","children","onDischarge","onDelete","fileName","_jsxFileName","lineNumber","columnNumber","onEnlist","_c","$RefreshReg$"],"sources":["C:/Users/Hp/bot-battlr/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport BotCollection from \"./components/BotCollection\";\r\nimport YourBotArmy from \"./components/YourBotArmy\";\r\nimport \"./App.css\";\r\n\r\n// This is the public endpoint you were trying to fix earlier\r\nconst BOTS_API = \"https://bot-battlr-api.onrender.com/bots\";\r\n\r\nfunction App() {\r\n  // FIX: Initialize bots as an empty array [] to prevent the \"bots.map is not a function\" error\r\n  const [bots, setBots] = useState([]);\r\n  const [army, setArmy] = useState([]);\r\n\r\n  // Fetch all bots on initial component mount\r\n  useEffect(() => {\r\n    fetch(BOTS_API)\r\n      .then((r) => r.json())\r\n      .then((data) => setBots(data))\r\n      .catch((error) => console.error(\"Error fetching bots:\", error));\r\n  }, []);\r\n\r\n  // Handler to add a bot to the army\r\n  const enlistBot = (bot) => {\r\n    // Prevent enlisting a bot if it's already in the army\r\n    if (!army.find((b) => b.id === bot.id)) {\r\n      setArmy([...army, bot]);\r\n    }\r\n  };\r\n\r\n  // Handler to remove a bot from the army\r\n  const dischargeBot = (bot) => {\r\n    setArmy(army.filter((b) => b.id !== bot.id));\r\n  };\r\n  \r\n  // Optional: Handler to permanently delete a bot from the backend and the UI\r\n  const deleteBot = (bot) => {\r\n    // 1. Send DELETE request to the backend\r\n    fetch(`${BOTS_API}/${bot.id}`, {\r\n      method: 'DELETE'\r\n    })\r\n    .then(r => {\r\n      if (r.ok) {\r\n        // 2. Remove from the local army state (if present)\r\n        setArmy(army.filter((b) => b.id !== bot.id));\r\n\r\n        // 3. Remove from the local bots collection state\r\n        setBots(bots.filter((b) => b.id !== bot.id));\r\n      } else {\r\n        console.error(\"Failed to delete bot on server.\");\r\n      }\r\n    })\r\n    .catch((error) => console.error(\"Error deleting bot:\", error));\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <YourBotArmy \r\n        army={army} \r\n        onDischarge={dischargeBot} \r\n        onDelete={deleteBot}\r\n      />\r\n      <BotCollection \r\n        bots={bots} \r\n        onEnlist={enlistBot} \r\n        onDelete={deleteBot} \r\n        army={army} // Pass army to allow BotCollection to disable enlisted bots\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}